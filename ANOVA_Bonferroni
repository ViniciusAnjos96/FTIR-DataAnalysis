{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMhhOf4ptLB4ZlQx3jsfsSD"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#  Mean difference and Bonferroni analysis\n",
        "# Change the NAME.csv\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from scipy import stats\n",
        "from statsmodels.sandbox.stats.multicomp import multipletests\n",
        "\n",
        "# Load the data\n",
        "df = pd.read_csv('NAME.csv')\n",
        "\n",
        "# Separate the classes\n",
        "class_names = df.iloc[:, 0].unique()\n",
        "spectra_data = df.iloc[:, 1:].values  # Get only the spectral data\n",
        "wavenumbers = df.columns[1:].astype(float).values # Get wavenumbers\n",
        "\n",
        "# Group spectra by class\n",
        "grouped_spectra = {}\n",
        "for class_name in class_names:\n",
        "    grouped_spectra[class_name] = spectra_data[df.iloc[:, 0] == class_name]\n",
        "\n",
        "# Calculate mean and standard deviation for each class\n",
        "mean_spectra = {}\n",
        "std_spectra = {}\n",
        "for class_name, spectra in grouped_spectra.items():\n",
        "    mean_spectra[class_name] = np.mean(spectra, axis=0)\n",
        "    std_spectra[class_name] = np.std(spectra, axis=0)\n",
        "\n",
        "# Plot mean difference with standard deviation bands\n",
        "plt.figure(figsize=(15, 7))\n",
        "\n",
        "# Calculate differences between pairs of classes (example: Class1 - Class2)\n",
        "# You can extend this to all pairs if needed\n",
        "class1 = class_names[0]\n",
        "class2 = class_names[2]\n",
        "mean_diff_1_2 = mean_spectra[class1] - mean_spectra[class2]\n",
        "std_sum_1_2 = std_spectra[class1] + std_spectra[class2] # A simple representation of variability around the difference\n",
        "\n",
        "plt.plot(wavenumbers, mean_diff_1_2, label=f'Difference: {class1} - {class2}')\n",
        "plt.fill_between(wavenumbers, mean_diff_1_2 - std_sum_1_2, mean_diff_1_2 + std_sum_1_2, color='gray', alpha=0.2)\n",
        "\n",
        "# Add other class differences here if desired\n",
        "\n",
        "plt.xlabel('Wavenumber (cm⁻¹)')\n",
        "plt.ylabel('Absorbance Difference')\n",
        "plt.title('Mean Difference Spectra with Standard Deviation Bands')\n",
        "plt.gca().invert_xaxis()\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Perform point-by-point ANOVA\n",
        "p_values = []\n",
        "for i in range(spectra_data.shape[1]): # Iterate through each wavenumber point\n",
        "    data_at_wavenumber = [grouped_spectra[class_name][:, i] for class_name in class_names]\n",
        "    fvalue, pvalue = stats.f_oneway(*data_at_wavenumber)\n",
        "    p_values.append(pvalue)\n",
        "\n",
        "# Apply Bonferroni correction for multiple testing\n",
        "reject, corrected_p_values, _, _ = multipletests(p_values, method='bonferroni')\n",
        "\n",
        "# Plot corrected p-values\n",
        "plt.figure(figsize=(15, 5))\n",
        "plt.plot(wavenumbers, corrected_p_values)\n",
        "plt.axhline(y=0.05, color='r', linestyle='--', label='Significance level (0.05)') # Add a significance level line\n",
        "plt.xlabel('Wavenumber (cm⁻¹)')\n",
        "plt.ylabel('Bonferroni Corrected p-value')\n",
        "plt.title('Point-by-Point ANOVA (Bonferroni Corrected p-values)')\n",
        "plt.gca().invert_xaxis()\n",
        "plt.yscale('log') # Often useful to plot p-values on a log scale\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "1wY0hxHyziL_"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}